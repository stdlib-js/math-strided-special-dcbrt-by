{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/ndarray.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar mapBy = require( '@stdlib/strided-base-map-by' );\nvar cbrt = require( '@stdlib/math-base-special-cbrt' );\n\n\n// MAIN //\n\n/**\n* Computes the cube root of each element retrieved from an input double-precision floating-point strided array via a callback function and assigns each result to an element in an output double-precision floating-point strided array.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - destination array\n* @param {integer} strideY - `y` stride length\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n* @returns {Float64Array} destination array\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* function accessor( v ) {\n*     return v;\n* }\n*\n* var x = new Float64Array( [ 1.0, 9.0, -27.0, 81.0, -125.0 ] );\n* var out = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* dcbrtBy( x.length, x, 1, out, 1, accessor );\n* // out => <Float64Array>[ 1.0, ~2.08, -3.0, ~4.327, -5.0 ]\n*/\nfunction dcbrtBy( N, x, strideX, y, strideY, clbk, thisArg ) {\n\treturn mapBy( N, x, strideX, y, strideY, cbrt, clbk, thisArg );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dcbrtBy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nvar mapBy = require( '@stdlib/strided-base-map-by' ).ndarray;\nvar cbrt = require( '@stdlib/math-base-special-cbrt' );\n\n\n// MAIN //\n\n/**\n* Computes the cube root of each element retrieved from an input double-precision floating-point strided array via a callback function and assigns each result to an element in an output double-precision floating-point strided array.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Float64Array} y - destination array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @param {Callback} clbk - callback\n* @param {*} [thisArg] - callback execution context\n* @returns {Float64Array} destination array\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* function accessor( v ) {\n*     return v;\n* }\n*\n* var x = new Float64Array( [ 1.0, 9.0, -27.0, 81.0, -125.0 ] );\n* var out = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* dcbrtBy( x.length, x, 1, 0, out, 1, 0, accessor );\n* // out => <Float64Array>[ 1.0, ~2.08, -3.0, ~4.327, -5.0 ]\n*/\nfunction dcbrtBy( N, x, strideX, offsetX, y, strideY, offsetY, clbk, thisArg ) {\n\treturn mapBy( N, x, strideX, offsetX, y, strideY, offsetY, cbrt, clbk, thisArg );\n}\n\n\n// EXPORTS //\n\nmodule.exports = dcbrtBy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the cube root of each element retrieved from an input double-precision floating-point strided array via a callback function and assign each result to an element in an output double-precision floating-point strided array.\n*\n* @module @stdlib/math-strided-special-dcbrt-by\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var dcbrtBy = require( '@stdlib/math-strided-special-dcbrt-by' );\n*\n* function accessor( v ) {\n*     return v;\n* }\n*\n* var x = new Float64Array( [ 1.0, 9.0, -27.0, 81.0, -125.0 ] );\n* var out = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* dcbrtBy( x.length, x, 1, out, 1, accessor );\n* // out => <Float64Array>[ 1.0, ~2.08, -3.0, ~4.327, -5.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var dcbrtBy = require( '@stdlib/math-strided-special-dcbrt-by' );\n*\n* function accessor( v ) {\n*     return v;\n* }\n*\n* var x = new Float64Array( [ 1.0, 9.0, -27.0, 81.0, -125.0 ] );\n* var out = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );\n*\n* dcbrtBy.ndarray( x.length, x, 1, 0, out, 1, 0, accessor );\n* // out => <Float64Array>[ 1.0, ~2.08, -3.0, ~4.327, -5.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAQ,QAAS,6BAA8B,EAC/CC,EAAO,QAAS,gCAAiC,EA8BrD,SAASC,EAASC,EAAGC,EAAGC,EAASC,EAAGC,EAASC,EAAMC,EAAU,CAC5D,OAAOT,EAAOG,EAAGC,EAAGC,EAASC,EAAGC,EAASN,EAAMO,EAAMC,CAAQ,CAC9D,CAKAV,EAAO,QAAUG,IC5DjB,IAAAQ,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAwBA,IAAIC,EAAQ,QAAS,6BAA8B,EAAE,QACjDC,EAAO,QAAS,gCAAiC,EAgCrD,SAASC,EAASC,EAAGC,EAAGC,EAASC,EAASC,EAAGC,EAASC,EAASC,EAAMC,EAAU,CAC9E,OAAOX,EAAOG,EAAGC,EAAGC,EAASC,EAASC,EAAGC,EAASC,EAASR,EAAMS,EAAMC,CAAQ,CAChF,CAKAZ,EAAO,QAAUG,ICRjB,IAAIU,EAAc,QAAS,uDAAwD,EAC/EC,EAAO,IACPC,EAAU,IAKdF,EAAaC,EAAM,UAAWC,CAAQ,EAKtC,OAAO,QAAUD",
  "names": ["require_main", "__commonJSMin", "exports", "module", "mapBy", "cbrt", "dcbrtBy", "N", "x", "strideX", "y", "strideY", "clbk", "thisArg", "require_ndarray", "__commonJSMin", "exports", "module", "mapBy", "cbrt", "dcbrtBy", "N", "x", "strideX", "offsetX", "y", "strideY", "offsetY", "clbk", "thisArg", "setReadOnly", "main", "ndarray"]
}
